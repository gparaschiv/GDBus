/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ALARMCLOCK_DBUS_GENERATED_H__
#define __ALARMCLOCK_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.time.service.alarmclock */

#define ALARM_CLOCK_TYPE_ALARMCLOCK (alarm_clock_alarmclock_get_type ())
#define ALARM_CLOCK_ALARMCLOCK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_ALARMCLOCK, alarmClockAlarmclock))
#define ALARM_CLOCK_IS_ALARMCLOCK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_ALARMCLOCK))
#define ALARM_CLOCK_ALARMCLOCK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_TYPE_ALARMCLOCK, alarmClockAlarmclockIface))

struct _alarmClockAlarmclock;
typedef struct _alarmClockAlarmclock alarmClockAlarmclock;
typedef struct _alarmClockAlarmclockIface alarmClockAlarmclockIface;

struct _alarmClockAlarmclockIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_alarm_status) (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_alarm_status) (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_alarmStatus);

  gboolean (*handle_set_alarm_time) (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_alarmTime);

  gboolean (*handle_set_time) (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_currentTime);

  void (*ring_alarm) (
    alarmClockAlarmclock *object);

};

GType alarm_clock_alarmclock_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_clock_alarmclock_interface_info (void);
guint alarm_clock_alarmclock_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_clock_alarmclock_complete_set_time (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation);

void alarm_clock_alarmclock_complete_set_alarm_time (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation);

void alarm_clock_alarmclock_complete_get_alarm_status (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation,
    gboolean status);

void alarm_clock_alarmclock_complete_set_alarm_status (
    alarmClockAlarmclock *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void alarm_clock_alarmclock_emit_ring_alarm (
    alarmClockAlarmclock *object);



/* D-Bus method calls: */
void alarm_clock_alarmclock_call_set_time (
    alarmClockAlarmclock *proxy,
    guint64 arg_currentTime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_alarmclock_call_set_time_finish (
    alarmClockAlarmclock *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_alarmclock_call_set_time_sync (
    alarmClockAlarmclock *proxy,
    guint64 arg_currentTime,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_alarmclock_call_set_alarm_time (
    alarmClockAlarmclock *proxy,
    guint64 arg_alarmTime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_alarmclock_call_set_alarm_time_finish (
    alarmClockAlarmclock *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_alarmclock_call_set_alarm_time_sync (
    alarmClockAlarmclock *proxy,
    guint64 arg_alarmTime,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_alarmclock_call_get_alarm_status (
    alarmClockAlarmclock *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_alarmclock_call_get_alarm_status_finish (
    alarmClockAlarmclock *proxy,
    gboolean *out_status,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_alarmclock_call_get_alarm_status_sync (
    alarmClockAlarmclock *proxy,
    gboolean *out_status,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_alarmclock_call_set_alarm_status (
    alarmClockAlarmclock *proxy,
    gboolean arg_alarmStatus,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_alarmclock_call_set_alarm_status_finish (
    alarmClockAlarmclock *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_alarmclock_call_set_alarm_status_sync (
    alarmClockAlarmclock *proxy,
    gboolean arg_alarmStatus,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY (alarm_clock_alarmclock_proxy_get_type ())
#define ALARM_CLOCK_ALARMCLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY, alarmClockAlarmclockProxy))
#define ALARM_CLOCK_ALARMCLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY, alarmClockAlarmclockProxyClass))
#define ALARM_CLOCK_ALARMCLOCK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY, alarmClockAlarmclockProxyClass))
#define ALARM_CLOCK_IS_ALARMCLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY))
#define ALARM_CLOCK_IS_ALARMCLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_TYPE_ALARMCLOCK_PROXY))

typedef struct _alarmClockAlarmclockProxy alarmClockAlarmclockProxy;
typedef struct _alarmClockAlarmclockProxyClass alarmClockAlarmclockProxyClass;
typedef struct _alarmClockAlarmclockProxyPrivate alarmClockAlarmclockProxyPrivate;

struct _alarmClockAlarmclockProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmClockAlarmclockProxyPrivate *priv;
};

struct _alarmClockAlarmclockProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_clock_alarmclock_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockAlarmclockProxy, g_object_unref)
#endif

void alarm_clock_alarmclock_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockAlarmclock *alarm_clock_alarmclock_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockAlarmclock *alarm_clock_alarmclock_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_clock_alarmclock_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockAlarmclock *alarm_clock_alarmclock_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockAlarmclock *alarm_clock_alarmclock_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON (alarm_clock_alarmclock_skeleton_get_type ())
#define ALARM_CLOCK_ALARMCLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON, alarmClockAlarmclockSkeleton))
#define ALARM_CLOCK_ALARMCLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON, alarmClockAlarmclockSkeletonClass))
#define ALARM_CLOCK_ALARMCLOCK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON, alarmClockAlarmclockSkeletonClass))
#define ALARM_CLOCK_IS_ALARMCLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON))
#define ALARM_CLOCK_IS_ALARMCLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_TYPE_ALARMCLOCK_SKELETON))

typedef struct _alarmClockAlarmclockSkeleton alarmClockAlarmclockSkeleton;
typedef struct _alarmClockAlarmclockSkeletonClass alarmClockAlarmclockSkeletonClass;
typedef struct _alarmClockAlarmclockSkeletonPrivate alarmClockAlarmclockSkeletonPrivate;

struct _alarmClockAlarmclockSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmClockAlarmclockSkeletonPrivate *priv;
};

struct _alarmClockAlarmclockSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_clock_alarmclock_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockAlarmclockSkeleton, g_object_unref)
#endif

alarmClockAlarmclock *alarm_clock_alarmclock_skeleton_new (void);


/* ---- */

#define ALARM_CLOCK_TYPE_OBJECT (alarm_clock_object_get_type ())
#define ALARM_CLOCK_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_OBJECT, alarmClockObject))
#define ALARM_CLOCK_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_OBJECT))
#define ALARM_CLOCK_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_TYPE_OBJECT, alarmClockObject))

struct _alarmClockObject;
typedef struct _alarmClockObject alarmClockObject;
typedef struct _alarmClockObjectIface alarmClockObjectIface;

struct _alarmClockObjectIface
{
  GTypeInterface parent_iface;
};

GType alarm_clock_object_get_type (void) G_GNUC_CONST;

alarmClockAlarmclock *alarm_clock_object_get_alarmclock (alarmClockObject *object);
alarmClockAlarmclock *alarm_clock_object_peek_alarmclock (alarmClockObject *object);

#define ALARM_CLOCK_TYPE_OBJECT_PROXY (alarm_clock_object_proxy_get_type ())
#define ALARM_CLOCK_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_OBJECT_PROXY, alarmClockObjectProxy))
#define ALARM_CLOCK_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_TYPE_OBJECT_PROXY, alarmClockObjectProxyClass))
#define ALARM_CLOCK_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_TYPE_OBJECT_PROXY, alarmClockObjectProxyClass))
#define ALARM_CLOCK_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_OBJECT_PROXY))
#define ALARM_CLOCK_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_TYPE_OBJECT_PROXY))

typedef struct _alarmClockObjectProxy alarmClockObjectProxy;
typedef struct _alarmClockObjectProxyClass alarmClockObjectProxyClass;
typedef struct _alarmClockObjectProxyPrivate alarmClockObjectProxyPrivate;

struct _alarmClockObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  alarmClockObjectProxyPrivate *priv;
};

struct _alarmClockObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType alarm_clock_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockObjectProxy, g_object_unref)
#endif

alarmClockObjectProxy *alarm_clock_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define ALARM_CLOCK_TYPE_OBJECT_SKELETON (alarm_clock_object_skeleton_get_type ())
#define ALARM_CLOCK_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_OBJECT_SKELETON, alarmClockObjectSkeleton))
#define ALARM_CLOCK_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_TYPE_OBJECT_SKELETON, alarmClockObjectSkeletonClass))
#define ALARM_CLOCK_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_TYPE_OBJECT_SKELETON, alarmClockObjectSkeletonClass))
#define ALARM_CLOCK_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_OBJECT_SKELETON))
#define ALARM_CLOCK_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_TYPE_OBJECT_SKELETON))

typedef struct _alarmClockObjectSkeleton alarmClockObjectSkeleton;
typedef struct _alarmClockObjectSkeletonClass alarmClockObjectSkeletonClass;
typedef struct _alarmClockObjectSkeletonPrivate alarmClockObjectSkeletonPrivate;

struct _alarmClockObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  alarmClockObjectSkeletonPrivate *priv;
};

struct _alarmClockObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType alarm_clock_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockObjectSkeleton, g_object_unref)
#endif

alarmClockObjectSkeleton *alarm_clock_object_skeleton_new (const gchar *object_path);
void alarm_clock_object_skeleton_set_alarmclock (alarmClockObjectSkeleton *object, alarmClockAlarmclock *interface_);

/* ---- */

#define ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT (alarm_clock_object_manager_client_get_type ())
#define ALARM_CLOCK_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT, alarmClockObjectManagerClient))
#define ALARM_CLOCK_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT, alarmClockObjectManagerClientClass))
#define ALARM_CLOCK_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT, alarmClockObjectManagerClientClass))
#define ALARM_CLOCK_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT))
#define ALARM_CLOCK_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _alarmClockObjectManagerClient alarmClockObjectManagerClient;
typedef struct _alarmClockObjectManagerClientClass alarmClockObjectManagerClientClass;
typedef struct _alarmClockObjectManagerClientPrivate alarmClockObjectManagerClientPrivate;

struct _alarmClockObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  alarmClockObjectManagerClientPrivate *priv;
};

struct _alarmClockObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockObjectManagerClient, g_object_unref)
#endif

GType alarm_clock_object_manager_client_get_type (void) G_GNUC_CONST;

GType alarm_clock_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void alarm_clock_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_clock_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_clock_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void alarm_clock_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_clock_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_clock_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __ALARMCLOCK_DBUS_GENERATED_H__ */
